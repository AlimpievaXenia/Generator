'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = compile;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var paramRegExp = /((?:\(\w+[^()]+)?\$[\w.]+(?:[^()]*\))?)/g;
var functionRegExp = /\((\w+)\s(.+)\)/;

var isObject = function isObject(value) {
  return Object.prototype.toString.call(value) === '[object Object]';
};

var flatParams = function flatParams(source, target, path) {
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var nextPath = path ? path + '.' + key : '$' + key;
      var value = source[key];
      if (Array.isArray(value) || isObject(value)) {
        flatParams(value, target, nextPath);
      } else {
        target[nextPath] = value;
      }
    }
  }
};

function compile(translation, helpers) {
  var nestedTranslation = Array.isArray(translation) || isObject(translation);

  if (nestedTranslation) {
    var compiled = {};

    for (var key in translation) {
      compiled[key] = compile(translation[key], helpers);
    }

    return compiled;
  }

  var compilationIsNotNeeded = typeof translation !== 'string' || translation.match(paramRegExp) === null;

  if (compilationIsNotNeeded) {
    return function () {
      return translation;
    };
  }

  var instructions = translation.split(paramRegExp).map(function (decl) {
    var paramIndex = decl.search(/\$\w+/);

    if (paramIndex === -1) {
      return function () {
        return decl;
      };
    }

    if (paramIndex === 0) {
      return function (params) {
        return params[decl];
      };
    }

    var options = decl.match(functionRegExp);
    var fn = helpers[options[1]];
    var args = options[2].split(/\|/g);

    return function (params) {
      return fn.apply(undefined, _toConsumableArray(args.map(function (a) {
        return params[a] || a;
      })));
    };
  });

  return function (args) {
    var params = {};

    if (args.length === 1 && (Array.isArray(args[0]) || isObject(args[0]))) {
      flatParams(args[0], params);
    } else if (args.length > 0) {
      for (var i = 0; i < args.length; i++) {
        params['$' + (i + 1)] = args[i];
      }
    }

    return instructions.reduce(function (acc, decl) {
      return acc + decl(params);
    }, '');
  };
}
module.exports = exports['default'];